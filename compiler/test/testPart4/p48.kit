(*VIRKER IKKE ENDNU!!!!!*)

func buildData() : int

    allocate values of length 60;
    
    values[0] = 599;
    values[1] = 648;
    values[2] = 8;
    values[3] = 781;
    values[4] = 796;
    values[5] = 893;
    values[6] = 412;
    values[7] = 199;
    values[8] = 561;
    values[9] = 489;
    values[10] = 236;
    values[11] = 977;
    values[12] = 630;
    values[13] = 785;
    values[14] = 280;
    values[15] = 138;
    values[16] = 127;
    values[17] = 657;
    values[18] = 361;
    values[19] = 534;
    values[20] = 179;
    values[21] = 140;
    values[22] = 334;
    values[23] = 963;
    values[24] = 909;
    values[25] = 212;
    values[26] = 34;
    values[27] = 100;
    values[28] = 12;
    values[29] = 371;
    values[30] = 219;
    values[31] = 752;
    values[32] = 519;
    values[33] = 594;
    values[34] = 903;
    values[35] = 981;
    values[36] = 258;
    values[37] = 791;
    values[38] = 873;
    values[39] = 108;
    values[40] = 511;
    values[41] = 264;
    values[42] = 327;
    values[43] = 587;
    values[44] = 815;
    values[45] = 503;
    values[46] = 851;
    values[47] = 592;
    values[48] = 396;
    values[49] = 6;
    values[50] = 156;
    values[51] = 904;
    values[52] = 617;
    values[53] = 635;
    values[54] = 899;
    values[55] = 497;
    values[56] = 585;
    values[57] = 793;
    values[58] = 269;
    values[59] = 918;
    return 0;
end buildData

type Tree = record of   {   data : int,
                            left : Tree,
                            right : Tree };

type DATA = array of int;

var globalTree : Tree;
var values : DATA;
var retVal : int;

func buildTree() : int
	
    var i : int;
    var temp : int;
    i = 1;
    globalTree.data = values[0];
    write globalTree.data;

    while(i < 60) do {
    	temp = values[i];
        retVal = insertValue(temp, globalTree);
        i = i + 1;
    }
    

    return 0;
end buildTree

func insertValue(val : int, node : Tree) : int
	
	write 10001;
	write val;
	write node.data;
    if(val < node.data) then {
    	write 10002;
        if(node.left == null) then {
        	write 10004;
            allocate node.left;
            node.left.left = null;
            node.left.right = null;
            node.left.data = val;
        }
        else {
        	write 10005;
            retVal = insertValue(val, node.left);
        }
    }
    else {
    	write 10003;
        if(node.right == null) then {
        	write 10006;
            allocate node.right;
            node.right.left = null;
            node.right.right = null;
            node.right.data = val;
        }
        else {
        	write 10007;
            retVal = insertValue(val, node.right);
        }
    }

    return 0;
end insertValue

func testGlobal() : int

	write values[0];
	write values[1];
	write values[2];
	return 0;
end testGlobal

func testParam(listparam : DATA) : int

	write listparam[0];
	write listparam[1];
	write listparam[2];

end testParam

func testOneParam(val : int) : int

	write val;

end testOneParam

func testRecordParam(val : int, node : Tree) : int

	write node.data;
	node.data = 7;
	return 0;
end testRecordParam

var i : int;

allocate globalTree;
globalTree.left = null;
globalTree.right = null;

(*
allocate globalTree.left;
allocate globalTree.right;

allocate values of length 3;
values[0] = 1234;
values[1] = 12345;
values[2] = 123456;

globalTree.data = values[0];
globalTree.left.data = values[1];
globalTree.right.data = values[2];
write globalTree.left.data;
write globalTree.data;
write globalTree.right.data;

retVal = testGlobal();
retVal = testParam(values);
retVal = testOneParam(values[0]);
*)

retVal = buildData();
retVal = buildTree();

(*
i = 45;
write values[i];
globalTree.data = 57262;
write globalTree.data;

retVal = testRecordParam(1234, globalTree);
write globalTree.data;
allocate globalTree.left;
globalTree.left.data = 12345;
write globalTree.left.data;
*)