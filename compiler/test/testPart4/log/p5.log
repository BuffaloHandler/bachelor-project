############################
Actual output:
--------------

############################
Expected output:
----------------
0
1
123
4
0
1
0
0
28

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
Here something naive is done
Here something naive is done
  |--> STARTING PRINTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $296, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq freeHeap2, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	addq $32, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc9
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc9:
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref10#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref10:
	addq $16, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref11#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref11:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $123, %rbx
	cmp $0, %rbx
	jg allocPos12
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos12:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc13
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc13:
	movq $123, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref14#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref14:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jge posi16
	movq $0, %rbx
	subq %r8, %rbx
	movq %rbx, %r8
posi16:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref17#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref17:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref18#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref18:
	push %rdi
	movq $1, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref19#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref19:
	addq $16, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref20#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref20:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq $0, %r8
	cmp $0, %rbx
	je null21
	movq %rbx, %r8
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
null21:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	push %rdi
	movq $4, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref22#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref22:
	addq $24, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref24#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref24:
	addq $24, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref25#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref25:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref26#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref26:
	addq $24, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref27#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref27:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref28#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref28:
	addq $24, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref29#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref29:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rdi
	movq $0, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref30#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref30:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref31#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref31:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref32#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref32:
	addq $16, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref33#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref33:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq $0, %r8
	cmp $0, %rbx
	je null34
	movq %rbx, %r8
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
null34:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq freeHeap2, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $28, %rbx
	cmp $0, %rbx
	jg allocPos35
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos35:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc36
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc36:
	movq $28, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq $0, %r8
	cmp $0, %rbx
	je null37
	movq %rbx, %r8
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
null37:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rax
mainend:
	addq $296, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
