############################
Actual output:
--------------

############################
Expected output:
----------------
6
8
12
34
100
108
127
138
140
156
179
199
212
219
236
258
264
269
280
327
334
361
371
396
412
489
497
503
511
519
534
561
585
587
592
594
599
617
630
635
648
657
752
781
785
791
793
796
815
851
873
893
899
903
904
909
918
963
977
981

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
IRtravVarType: symbol data already had cgu attatched
IRtravVarType: symbol left already had cgu attatched
IRtravVarType: symbol right already had cgu attatched
  |--> STARTING PRINTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $184, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	addq $24, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc13
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc13:
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref14#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref14:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref16#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref16:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref17#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref17:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq %rbp, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	movq %r8, %rbx
	push %rbx
	call buildData8
#remove static link and parameters
	addq $8, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %rbp, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	movq %r8, %rbx
	push %rbx
	call buildTree9
#remove static link and parameters
	addq $8, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %rbp, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	push (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %r8, %rbx
	push %rbx
	call printTree11
#remove static link and parameters
	addq $16, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rax
mainend:
	addq $184, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



buildData8:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $1944, %rsp
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq freeHeap2, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $60, %rbx
	cmp $0, %rbx
	jg allocPos19
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos19:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc20
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc20:
	movq $60, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq $599, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError22#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed21#not indexOutOfBounds
indeksError22:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed21:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref24#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref24:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $648, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref27#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref27:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError26#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed25#not indexOutOfBounds
indeksError26:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed25:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref28#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref28:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $2, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref31#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref31:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError30#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed29#not indexOutOfBounds
indeksError30:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed29:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref32#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref32:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $781, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $3, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError34#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed33#not indexOutOfBounds
indeksError34:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed33:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref36#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref36:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $796, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $4, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError38#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed37#not indexOutOfBounds
indeksError38:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed37:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $893, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $5, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref43#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref43:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError42#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed41#not indexOutOfBounds
indeksError42:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed41:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref44#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref44:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $412, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $6, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref47#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref47:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError46#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed45#not indexOutOfBounds
indeksError46:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed45:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref48#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref48:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $199, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $7, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref51#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref51:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError50#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed49#not indexOutOfBounds
indeksError50:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed49:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref52#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref52:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $561, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $8, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref55#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref55:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError54#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed53#not indexOutOfBounds
indeksError54:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed53:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $489, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $9, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref59#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref59:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError58#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed57#not indexOutOfBounds
indeksError58:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed57:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $236, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $10, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref63#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref63:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError62#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed61#not indexOutOfBounds
indeksError62:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed61:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $977, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $11, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref67#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref67:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError66#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed65#not indexOutOfBounds
indeksError66:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed65:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref68#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref68:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $630, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $12, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref71#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref71:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError70#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed69#not indexOutOfBounds
indeksError70:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed69:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref72#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref72:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $785, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $13, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref75#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref75:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError74#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed73#not indexOutOfBounds
indeksError74:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed73:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref76#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref76:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $280, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $14, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref79#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref79:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError78#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed77#not indexOutOfBounds
indeksError78:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed77:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref80#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref80:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $138, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $15, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref83#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref83:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError82#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed81#not indexOutOfBounds
indeksError82:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed81:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref84#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref84:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $127, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $16, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref87#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref87:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError86#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed85#not indexOutOfBounds
indeksError86:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed85:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref88#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref88:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $657, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $17, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref91#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref91:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError90#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed89#not indexOutOfBounds
indeksError90:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed89:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref92#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref92:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $361, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $18, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref95#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref95:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError94#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed93#not indexOutOfBounds
indeksError94:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed93:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref96#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref96:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $534, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $19, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref99#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref99:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError98#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed97#not indexOutOfBounds
indeksError98:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed97:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref100#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref100:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $179, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $20, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref103#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref103:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError102#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed101#not indexOutOfBounds
indeksError102:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed101:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref104#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref104:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $140, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $21, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref107#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref107:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError106#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed105#not indexOutOfBounds
indeksError106:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed105:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref108#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref108:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $334, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $22, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref111#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref111:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError110#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed109#not indexOutOfBounds
indeksError110:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed109:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref112#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref112:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $963, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $23, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref115#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref115:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError114#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed113#not indexOutOfBounds
indeksError114:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed113:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref116#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref116:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $909, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $24, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref119#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref119:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError118#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed117#not indexOutOfBounds
indeksError118:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed117:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref120#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref120:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $212, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $25, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref123#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref123:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError122#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed121#not indexOutOfBounds
indeksError122:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed121:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref124#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref124:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $34, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $26, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref127#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref127:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError126#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed125#not indexOutOfBounds
indeksError126:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed125:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref128#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref128:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $100, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $27, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref131#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref131:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError130#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed129#not indexOutOfBounds
indeksError130:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed129:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref132#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref132:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $12, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $28, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref135#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref135:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError134#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed133#not indexOutOfBounds
indeksError134:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed133:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref136#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref136:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $371, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $29, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref139#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref139:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError138#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed137#not indexOutOfBounds
indeksError138:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed137:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref140#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref140:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $219, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $30, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref143#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref143:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError142#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed141#not indexOutOfBounds
indeksError142:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed141:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref144#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref144:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $752, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $31, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref147#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref147:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError146#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed145#not indexOutOfBounds
indeksError146:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed145:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref148#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref148:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $519, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $32, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref151#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref151:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError150#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed149#not indexOutOfBounds
indeksError150:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed149:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref152#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref152:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $594, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $33, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref155#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref155:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError154#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed153#not indexOutOfBounds
indeksError154:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed153:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref156#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref156:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $903, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $34, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref159#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref159:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError158#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed157#not indexOutOfBounds
indeksError158:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed157:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref160#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref160:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $981, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $35, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref163#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref163:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError162#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed161#not indexOutOfBounds
indeksError162:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed161:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref164#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref164:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $258, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $36, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref167#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref167:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError166#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed165#not indexOutOfBounds
indeksError166:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed165:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref168#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref168:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $791, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $37, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref171#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref171:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError170#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed169#not indexOutOfBounds
indeksError170:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed169:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref172#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref172:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $873, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $38, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref175#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref175:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError174#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed173#not indexOutOfBounds
indeksError174:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed173:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref176#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref176:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $108, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $39, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref179#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref179:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError178#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed177#not indexOutOfBounds
indeksError178:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed177:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref180#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref180:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $511, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $40, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref183#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref183:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError182#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed181#not indexOutOfBounds
indeksError182:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed181:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref184#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref184:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $264, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $41, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref187#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref187:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError186#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed185#not indexOutOfBounds
indeksError186:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed185:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref188#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref188:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $327, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $42, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref191#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref191:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError190#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed189#not indexOutOfBounds
indeksError190:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed189:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref192#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref192:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $587, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $43, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref195#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref195:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError194#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed193#not indexOutOfBounds
indeksError194:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed193:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref196#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref196:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $815, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $44, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref199#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref199:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError198#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed197#not indexOutOfBounds
indeksError198:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed197:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref200#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref200:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $503, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $45, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref203#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref203:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError202#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed201#not indexOutOfBounds
indeksError202:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed201:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref204#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref204:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $851, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $46, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref207#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref207:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError206#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed205#not indexOutOfBounds
indeksError206:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed205:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref208#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref208:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $592, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $47, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref211#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref211:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError210#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed209#not indexOutOfBounds
indeksError210:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed209:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref212#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref212:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $396, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $48, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref215#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref215:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError214#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed213#not indexOutOfBounds
indeksError214:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed213:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref216#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref216:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $6, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $49, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref219#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref219:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError218#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed217#not indexOutOfBounds
indeksError218:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed217:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref220#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref220:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $156, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $50, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref223#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref223:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError222#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed221#not indexOutOfBounds
indeksError222:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed221:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref224#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref224:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $904, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $51, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref227#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref227:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError226#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed225#not indexOutOfBounds
indeksError226:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed225:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref228#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref228:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $617, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $52, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref231#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref231:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError230#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed229#not indexOutOfBounds
indeksError230:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed229:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref232#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref232:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $635, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $53, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref235#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref235:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError234#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed233#not indexOutOfBounds
indeksError234:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed233:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref236#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref236:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $899, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $54, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref239#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref239:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError238#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed237#not indexOutOfBounds
indeksError238:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed237:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref240#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref240:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $497, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $55, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref243#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref243:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError242#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed241#not indexOutOfBounds
indeksError242:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed241:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref244#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref244:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $585, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $56, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref247#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref247:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError246#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed245#not indexOutOfBounds
indeksError246:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed245:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref248#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref248:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $793, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $57, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref251#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref251:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError250#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed249#not indexOutOfBounds
indeksError250:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed249:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref252#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref252:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $269, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $58, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref255#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref255:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError254#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed253#not indexOutOfBounds
indeksError254:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed253:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref256#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref256:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $918, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $59, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref259#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref259:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError258#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed257#not indexOutOfBounds
indeksError258:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed257:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref260#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref260:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rax
	jmp buildData8end
buildData8end:
	addq $1944, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



buildTree9:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $264, %rsp
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref264#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref264:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError263#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed262#not indexOutOfBounds
indeksError263:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed262:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref265#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref265:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref266#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref266:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref267#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref267:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
while268:
	movq $1, %r9
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $60, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r8
	jl ge269
	movq $0, %r9
ge269:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile268
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbx, %r8
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %r8
	jne nonNullDeref272#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref272:
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError271#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed270#not indexOutOfBounds
indeksError271:
#Exit program with error here
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed270:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref273#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref273:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r9
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	push (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-7, %rdx
	push (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %r9, %rbx
	push %rbx
	call insertValue10
#remove static link and parameters
	addq $24, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	jmp while268
endwhile268:
	movq $0, %rax
	jmp buildTree9end
buildTree9end:
	addq $264, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



insertValue10:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $488, %rsp
	movq $1, %r9
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref277#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref277:
	addq $0, %rbx
	movq %rbx, %r10
	cmp $0, %r10
	jne nonNullDeref278#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref278:
	movq %r10, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r8
	jl ge276
	movq $0, %r9
ge276:
	movq %r9, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $1, %rbx
	jne else275
	movq $1, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref281#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref281:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref282#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref282:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r9
	je eq280
	movq $0, %r8
eq280:
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $1, %rbx
	jne else279
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref283#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref283:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref284#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref284:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	addq $24, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc285
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc285:
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref288#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref288:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref289#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref289:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref286#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref286:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref287#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref287:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref292#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref292:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref293#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref293:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref290#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref290:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref291#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref291:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref296#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref296:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref297#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref297:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref294#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref294:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref295#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref295:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	jmp endif279
else279:
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref298#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref298:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref299#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref299:
	movq %r9, %rcx
	push (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $3, %rdx
	push (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %r8, %rbx
	push %rbx
	call insertValue10
#remove static link and parameters
	addq $24, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
endif279:
	jmp endif275
else275:
	movq $1, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref302#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref302:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref303#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref303:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r9
	je eq301
	movq $0, %r8
eq301:
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $1, %rbx
	jne else300
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref304#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref304:
	addq $16, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref305#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref305:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	addq $24, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc306
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc306:
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref309#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref309:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref310#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref310:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref307#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref307:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref308#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref308:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref313#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref313:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref314#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref314:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref311#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref311:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref312#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref312:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref317#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref317:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref318#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref318:
#creating record dereferencing
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref315#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref315:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref316#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref316:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	jmp endif300
else300:
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $4, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref319#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref319:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref320#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref320:
	movq %r9, %rcx
	push (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $3, %rdx
	push (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	movq %r8, %rbx
	push %rbx
	call insertValue10
#remove static link and parameters
	addq $24, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
endif300:
endif275:
	movq $0, %rax
	jmp insertValue10end
insertValue10end:
	addq $488, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



printTree11:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $256, %rsp
	movq $1, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref324#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref324:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref325#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref325:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r9
	je eq323
	movq $0, %r8
eq323:
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $1, %rbx
	jne else322
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	jmp endif322
else322:
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref326#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref326:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref327#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref327:
	movq %r9, %rcx
	push (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq %r8, %rbx
	push %rbx
	call printTree11
#remove static link and parameters
	addq $16, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
endif322:
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref328#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref328:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref329#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref329:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $1, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref332#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref332:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref333#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref333:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r9
	je eq331
	movq $0, %r8
eq331:
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $1, %rbx
	jne else330
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	jmp endif330
else330:
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref334#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref334:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref335#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref335:
	movq %r9, %rcx
	push (%rcx)
	movq %rbp, %rdi#resetting basepointer
	movq %r8, %rbx
	push %rbx
	call printTree11
#remove static link and parameters
	addq $16, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r9
	push %rbx
	movq %rbp, %r8
	addq $16, %r8
	movq %r8, %rbx
	movq (%rbx), %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r9, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
endif330:
	movq $0, %rax
	jmp printTree11end
printTree11end:
	addq $256, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
