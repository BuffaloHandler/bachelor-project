############################
Actual output:
--------------

############################
Expected output:
----------------
0
1
0
1
1
0
1

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
IRtravVarType: symbol b already had cgu attatched
  |--> STARTING PRINTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $192, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false9
	movq $0, %r8
false9:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false10
	movq $0, %r8
false10:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $1, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false11
	movq $0, %r8
false11:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq %r8, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false12
	movq $0, %r8
false12:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $1, %r9
	movq $10, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $4, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r8
	jg ge13
	movq $0, %r9
ge13:
	push %rdi
	movq %r9, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $1, %r9
	movq $10, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	movq $4, %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp %rbx, %r8
	jg ge15
	movq $0, %r9
ge15:
	movq %r9, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false14
	movq $0, %r8
false14:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
	movq freeHeap2, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi#resetting basepointer
	addq $8, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx#may be out of order
	jl allocSucc16
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc16:
	movq $0, %rbx
	movq %rbp, %rdi#resetting basepointer
	movq %rbx, %r8
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref17#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref17:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref18#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref18:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
	movq %rbp, %rdi#resetting basepointer
	push %rbx
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	pop %rbx
#creating record dereferencing
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref20#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref20:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref21#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref21:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbp, %rdi#resetting basepointer
	movq $1, %r8
	cmp $0, %rbx
	je false19
	movq $0, %r8
false19:
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rax
mainend:
	addq $192, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
