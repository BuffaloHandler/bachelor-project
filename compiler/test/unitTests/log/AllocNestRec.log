############################
Actual output:
--------------
14
20
0
1
1
532
ret 0

############################
Expected output:
----------------
14
20
0
1
1
532

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $504, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 5 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	addq $16, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc8
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc8:
#line: 6 assign statement
	movq $14, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref9#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref9:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref10#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref10:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 7 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref11#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref11:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref12#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref12:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	addq $16, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc13
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc13:
#line: 8 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref16#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref16:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref17#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref17:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref14#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref14:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	addq $24, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc18
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc18:
#line: 9 assign statement
	movq $20, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref24#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref24:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref21#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref21:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref22#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref22:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref19#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref19:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref20#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref20:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 10 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref29#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref29:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref30#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref30:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref27#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref27:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref28#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref28:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref25#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref25:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref26#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref26:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	addq $16, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc31
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc31:
#line: 11 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref38#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref38:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref36#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref36:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref37#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref37:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref34#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref34:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref32#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref32:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref33#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref33:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 12 assign statement
	movq $1, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref46#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref46:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref47#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref47:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref44#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref44:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref45#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref45:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref42#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref42:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref43#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref43:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref41#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref41:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 13 assign statement
	movq $1, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref52#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref52:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref53#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref53:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref50#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref50:
	addq $0, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref51#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref51:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref48#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref48:
	addq $16, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref49#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref49:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 14 assign statement
	movq $532, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref57#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref57:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref54#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref54:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref55#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref55:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 16 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref58#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref58:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref59#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref59:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 17 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref65#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref65:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref62#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref62:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref63#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref63:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref61#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref61:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 18 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref72#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref72:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref73#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref73:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref70#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref70:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref71#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref71:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref68#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref68:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref69#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref69:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref66#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref66:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref67#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref67:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 19 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref80#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref80:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref81#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref81:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref78#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref78:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref79#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref79:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref76#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref76:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref77#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref77:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref74#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref74:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref75#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref75:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 20 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref86#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref86:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref87#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref87:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref84#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref84:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref85#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref85:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref82#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref82:
	addq $16, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref83#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref83:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 21 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp $0, %rbx
	jne nonNullDeref90#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref90:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref91#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref91:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref88#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref88:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref89#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref89:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rax
mainend:
	addq $504, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
