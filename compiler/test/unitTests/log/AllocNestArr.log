############################
Actual output:
--------------
0
100
110
111
200
210
211
220
221
222
10000
0
100
110
111
200
210
211
220
221
222
ret 0

############################
Expected output:
----------------
0
100
110
111
200
210
211
220
221
222
10000
0
100
110
111
200
210
211
220
221
222

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
Line 16: can only allocate variables
Something weird here: pretend everything is fine
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $1344, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 5 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp $0, %rbx
	jg allocPos8
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos8:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc9
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc9:
	movq $3, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 6 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 10 while statement
while10:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge11
	movq $0, %r9
ge11:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile10
#line: 10 list statement statement
#line: 8 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref14#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref14:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError13#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed12#not indexOutOfBounds
indeksError13:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed12:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	cmp $0, %rbx
	jg allocPos16
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos16:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc17
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc17:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 9 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while10
endwhile10:
#line: 12 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 20 while statement
while18:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge19
	movq $0, %r9
ge19:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile18
#line: 20 list statement statement
#line: 14 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 18 while statement
while20:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp %rbx, %r8
	jle ge21
	movq $0, %r9
ge21:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile20
#line: 18 list statement statement
#line: 16 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref28#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref28:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError27#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed26#not indexOutOfBounds
indeksError27:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed26:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref29#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref29:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref24#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref24:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError23#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed22#not indexOutOfBounds
indeksError23:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed22:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref25#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref25:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	cmp $0, %rbx
	jg allocPos30
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos30:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc31
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc31:
	movq %r8, %rbx
	movq %r9, %rcx
	movq %rbx, (%rcx)
#line: 17 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while20
endwhile20:
#line: 19 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while18
endwhile18:
#line: 37 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 49 while statement
while32:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge33
	movq $0, %r9
ge33:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile32
#line: 49 list statement statement
#line: 39 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 47 while statement
while34:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp %rbx, %r8
	jle ge35
	movq $0, %r9
ge35:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile34
#line: 47 list statement statement
#line: 41 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 45 while statement
while36:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp %rbx, %r8
	jle ge37
	movq $0, %r9
ge37:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile36
#line: 45 list statement statement
#line: 43 assign statement
	movq $100, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq $10, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	imulq %r9, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref48#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref48:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError47#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed46#not indexOutOfBounds
indeksError47:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed46:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref49#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref49:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref44#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref44:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError43#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed42#not indexOutOfBounds
indeksError43:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed42:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref45#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref45:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError39#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed38#not indexOutOfBounds
indeksError39:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed38:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref41#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref41:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 44 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while36
endwhile36:
#line: 46 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while34
endwhile34:
#line: 48 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while32
endwhile32:
#line: 51 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError59#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed58#not indexOutOfBounds
indeksError59:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed58:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref61#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref61:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError55#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed54#not indexOutOfBounds
indeksError55:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed54:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref57#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref57:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref52#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref52:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError51#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed50#not indexOutOfBounds
indeksError51:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed50:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref53#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref53:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 52 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref72#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref72:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError71#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed70#not indexOutOfBounds
indeksError71:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed70:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref73#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref73:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref68#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref68:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError67#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed66#not indexOutOfBounds
indeksError67:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed66:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref69#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref69:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError63#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed62#not indexOutOfBounds
indeksError63:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed62:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref65#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref65:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 53 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref84#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref84:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError83#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed82#not indexOutOfBounds
indeksError83:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed82:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref85#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref85:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref80#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref80:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError79#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed78#not indexOutOfBounds
indeksError79:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed78:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref81#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref81:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref76#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref76:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError75#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed74#not indexOutOfBounds
indeksError75:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed74:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref77#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref77:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 54 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref96#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref96:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError95#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed94#not indexOutOfBounds
indeksError95:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed94:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref97#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref97:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref92#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref92:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError91#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed90#not indexOutOfBounds
indeksError91:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed90:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref93#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref93:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref88#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref88:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError87#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed86#not indexOutOfBounds
indeksError87:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed86:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref89#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref89:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 55 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref108#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref108:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError107#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed106#not indexOutOfBounds
indeksError107:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed106:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref109#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref109:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref104#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref104:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError103#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed102#not indexOutOfBounds
indeksError103:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed102:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref105#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref105:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref100#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref100:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError99#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed98#not indexOutOfBounds
indeksError99:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed98:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref101#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref101:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 56 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref120#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref120:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError119#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed118#not indexOutOfBounds
indeksError119:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed118:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref121#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref121:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref116#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref116:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError115#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed114#not indexOutOfBounds
indeksError115:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed114:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref117#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref117:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref112#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref112:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError111#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed110#not indexOutOfBounds
indeksError111:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed110:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref113#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref113:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 57 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref132#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref132:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError131#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed130#not indexOutOfBounds
indeksError131:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed130:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref133#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref133:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref128#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref128:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError127#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed126#not indexOutOfBounds
indeksError127:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed126:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref129#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref129:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref124#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref124:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError123#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed122#not indexOutOfBounds
indeksError123:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed122:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref125#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref125:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 58 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref144#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref144:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError143#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed142#not indexOutOfBounds
indeksError143:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed142:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref145#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref145:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref140#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref140:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError139#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed138#not indexOutOfBounds
indeksError139:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed138:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref141#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref141:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref136#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref136:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError135#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed134#not indexOutOfBounds
indeksError135:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed134:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref137#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref137:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 59 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref156#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref156:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError155#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed154#not indexOutOfBounds
indeksError155:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed154:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref157#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref157:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref152#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref152:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError151#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed150#not indexOutOfBounds
indeksError151:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed150:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref153#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref153:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref148#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref148:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError147#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed146#not indexOutOfBounds
indeksError147:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed146:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref149#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref149:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 60 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref168#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref168:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError167#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed166#not indexOutOfBounds
indeksError167:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed166:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref169#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref169:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref164#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref164:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError163#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed162#not indexOutOfBounds
indeksError163:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed162:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref165#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref165:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref160#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref160:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError159#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed158#not indexOutOfBounds
indeksError159:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed158:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref161#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref161:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 61 write statement
	push %rdi
	movq $10000, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 63 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 75 while statement
while170:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge171
	movq $0, %r9
ge171:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile170
#line: 75 list statement statement
#line: 65 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 73 while statement
while172:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp %rbx, %r8
	jle ge173
	movq $0, %r9
ge173:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile172
#line: 73 list statement statement
#line: 67 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 71 while statement
while174:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	cmp %rbx, %r8
	jle ge175
	movq $0, %r9
ge175:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile174
#line: 71 list statement statement
#line: 69 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref186#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref186:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError185#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed184#not indexOutOfBounds
indeksError185:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed184:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref187#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref187:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref182#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref182:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError181#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed180#not indexOutOfBounds
indeksError181:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed180:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref183#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref183:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref178#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref178:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError177#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed176#not indexOutOfBounds
indeksError177:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed176:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref179#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref179:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 70 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while174
endwhile174:
#line: 72 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while172
endwhile172:
#line: 74 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while170
endwhile170:
	movq $0, %rax
mainend:
	addq $1344, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
