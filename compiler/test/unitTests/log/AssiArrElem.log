############################
Actual output:
--------------
10
1
2
10
11
12
20
21
22
30
31
32
100
101
102
110
111
112
120
121
122
130
131
132
200
201
202
210
20
212
220
221
222
230
231
232
300
301
302
310
311
312
320
321
322
330
331
332
400
401
402
410
411
412
420
421
422
430
431
432
0
1
10
11
321
411

############################
Expected output:
----------------

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
Line 13: can only allocate variables
Something weird here: pretend everything is fine
Line 28: can only allocate variables
Something weird here: pretend everything is fine
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $1456, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 7 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp $0, %rbx
	jg allocPos8
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos8:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc9
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc9:
	movq $5, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 8 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 22 while statement
while10:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl ge11
	movq $0, %r9
ge11:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile10
#line: 22 list statement statement
#line: 10 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref14#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref14:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError13#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed12#not indexOutOfBounds
indeksError13:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed12:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $4, %rbx
	cmp $0, %rbx
	jg allocPos16
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos16:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc17
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc17:
	movq $4, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 11 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 20 while statement
while18:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $4, %rbx
	cmp %rbx, %r8
	jl ge19
	movq $0, %r9
ge19:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile18
#line: 20 list statement statement
#line: 13 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref26#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref26:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError25#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed24#not indexOutOfBounds
indeksError25:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed24:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref27#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref27:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref22#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref22:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError21#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed20#not indexOutOfBounds
indeksError21:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed20:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $3, %rbx
	cmp $0, %rbx
	jg allocPos28
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos28:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc29
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc29:
	movq $3, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 14 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-10, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 18 while statement
while30:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge31
	movq $0, %r9
ge31:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile30
#line: 18 list statement statement
#line: 16 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $100, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	movq $10, %rbx
	imulq %r9, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref42#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref42:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError41#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed40#not indexOutOfBounds
indeksError41:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed40:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref43#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref43:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref38#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref38:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError37#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed36#not indexOutOfBounds
indeksError37:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed36:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref34#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref34:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError33#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed32#not indexOutOfBounds
indeksError33:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed32:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 17 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-10, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while30
endwhile30:
#line: 19 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while18
endwhile18:
#line: 21 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while10
endwhile10:
#line: 25 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp $0, %rbx
	jg allocPos44
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos44:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc45
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc45:
	movq $3, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 26 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 35 while statement
while46:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge47
	movq $0, %r9
ge47:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile46
#line: 35 list statement statement
#line: 28 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref50#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref50:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError49#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed48#not indexOutOfBounds
indeksError49:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed48:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref51#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref51:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $2, %rbx
	cmp $0, %rbx
	jg allocPos52
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos52:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc53
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc53:
	movq $2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 29 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 33 while statement
while54:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $2, %rbx
	cmp %rbx, %r8
	jl ge55
	movq $0, %r9
ge55:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile54
#line: 33 list statement statement
#line: 31 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref62#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref62:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError61#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed60#not indexOutOfBounds
indeksError61:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed60:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref63#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref63:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref58#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref58:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError57#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed56#not indexOutOfBounds
indeksError57:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed56:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref59#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref59:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 32 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while54
endwhile54:
#line: 34 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while46
endwhile46:
#line: 39 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref70#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref70:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError69#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed68#not indexOutOfBounds
indeksError69:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed68:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref71#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref71:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref66#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref66:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError65#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed64#not indexOutOfBounds
indeksError65:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed64:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref67#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref67:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref82#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref82:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError81#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed80#not indexOutOfBounds
indeksError81:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed80:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref83#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref83:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref78#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref78:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError77#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed76#not indexOutOfBounds
indeksError77:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed76:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref79#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref79:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref74#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref74:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError73#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed72#not indexOutOfBounds
indeksError73:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed72:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref75#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref75:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 40 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref90#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref90:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError89#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed88#not indexOutOfBounds
indeksError89:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed88:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref91#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref91:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref86#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref86:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError85#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed84#not indexOutOfBounds
indeksError85:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed84:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref87#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref87:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref102#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref102:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError101#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed100#not indexOutOfBounds
indeksError101:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed100:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref103#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref103:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref98#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref98:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError97#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed96#not indexOutOfBounds
indeksError97:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed96:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref99#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref99:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref94#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref94:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError93#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed92#not indexOutOfBounds
indeksError93:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed92:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref95#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref95:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 41 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref114#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref114:
	movq $4, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError113#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed112#not indexOutOfBounds
indeksError113:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed112:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref115#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref115:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref110#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref110:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError109#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed108#not indexOutOfBounds
indeksError109:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed108:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref111#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref111:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref106#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref106:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError105#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed104#not indexOutOfBounds
indeksError105:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed104:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref107#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref107:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref122#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref122:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError121#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed120#not indexOutOfBounds
indeksError121:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed120:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref123#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref123:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref118#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref118:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError117#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed116#not indexOutOfBounds
indeksError117:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed116:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref119#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref119:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 42 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref134#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref134:
	movq $3, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError133#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed132#not indexOutOfBounds
indeksError133:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed132:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref135#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref135:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref130#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref130:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError129#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed128#not indexOutOfBounds
indeksError129:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed128:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref131#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref131:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref126#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref126:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError125#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed124#not indexOutOfBounds
indeksError125:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed124:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref127#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref127:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref142#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref142:
	movq $2, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError141#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed140#not indexOutOfBounds
indeksError141:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed140:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref143#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref143:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref138#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref138:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError137#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed136#not indexOutOfBounds
indeksError137:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed136:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref139#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref139:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 44 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 56 while statement
while144:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl ge145
	movq $0, %r9
ge145:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile144
#line: 56 list statement statement
#line: 46 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 54 while statement
while146:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $4, %rbx
	cmp %rbx, %r8
	jl ge147
	movq $0, %r9
ge147:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile146
#line: 54 list statement statement
#line: 48 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-10, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 52 while statement
while148:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge149
	movq $0, %r9
ge149:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile148
#line: 52 list statement statement
#line: 50 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref160#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref160:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError159#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed158#not indexOutOfBounds
indeksError159:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed158:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref161#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref161:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref156#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref156:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError155#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed154#not indexOutOfBounds
indeksError155:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed154:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref157#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref157:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref152#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref152:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError151#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed150#not indexOutOfBounds
indeksError151:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed150:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref153#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref153:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 51 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-10, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-10, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while148
endwhile148:
#line: 53 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while146
endwhile146:
#line: 55 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while144
endwhile144:
#line: 59 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 67 while statement
while162:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $3, %rbx
	cmp %rbx, %r8
	jl ge163
	movq $0, %r9
ge163:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile162
#line: 67 list statement statement
#line: 61 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 65 while statement
while164:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $2, %rbx
	cmp %rbx, %r8
	jl ge165
	movq $0, %r9
ge165:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile164
#line: 65 list statement statement
#line: 63 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref172#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref172:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError171#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed170#not indexOutOfBounds
indeksError171:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed170:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref173#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref173:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref168#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref168:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError167#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed166#not indexOutOfBounds
indeksError167:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed166:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref169#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref169:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 64 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while164
endwhile164:
#line: 66 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while162
endwhile162:
	movq $0, %rax
mainend:
	addq $1456, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
