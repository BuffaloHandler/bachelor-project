############################
Actual output:
--------------
12
12
12
ret 0

############################
Expected output:
----------------
12
12
12

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $472, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 6 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp $0, %rbx
	jg allocPos8
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos8:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc9
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc9:
	movq $5, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 7 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref12#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref12:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError11#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed10#not indexOutOfBounds
indeksError11:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed10:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref13#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref13:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $2, %rbx
	cmp $0, %rbx
	jg allocPos14
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos14:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc15
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc15:
	movq $2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 8 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref22#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref22:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError21#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed20#not indexOutOfBounds
indeksError21:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed20:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref18#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref18:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError17#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed16#not indexOutOfBounds
indeksError17:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed16:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref19#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref19:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	addq $16, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc24
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc24:
#line: 9 assign statement
	movq $1, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref33#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref33:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError32#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed31#not indexOutOfBounds
indeksError32:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed31:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref34#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref34:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref29#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref29:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError28#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed27#not indexOutOfBounds
indeksError28:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed27:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref30#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref30:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref25#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref25:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref26#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref26:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 10 assign statement
	movq $2, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref43#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref43:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError42#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed41#not indexOutOfBounds
indeksError42:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed41:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref44#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref44:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError38#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed37#not indexOutOfBounds
indeksError38:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed37:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref36#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref36:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 11 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref53#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref53:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError52#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed51#not indexOutOfBounds
indeksError52:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed51:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref54#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref54:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref49#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref49:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError48#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed47#not indexOutOfBounds
indeksError48:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed47:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref50#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref50:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref45#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref45:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref46#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref46:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref63#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref63:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError62#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed61#not indexOutOfBounds
indeksError62:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed61:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref59#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref59:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError58#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed57#not indexOutOfBounds
indeksError58:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed57:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref55#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref55:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 13 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref67#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref67:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError66#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed65#not indexOutOfBounds
indeksError66:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed65:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref68#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref68:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 14 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref71#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref71:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError70#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed69#not indexOutOfBounds
indeksError70:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed69:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref72#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref72:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 16 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref77#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref77:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError76#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed75#not indexOutOfBounds
indeksError76:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed75:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref78#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref78:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref73#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref73:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref74#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref74:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref83#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref83:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError82#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed81#not indexOutOfBounds
indeksError82:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed81:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref84#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref84:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref79#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref79:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref80#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref80:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 17 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref93#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref93:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError92#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed91#not indexOutOfBounds
indeksError92:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed91:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref94#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref94:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref89#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref89:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError88#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed87#not indexOutOfBounds
indeksError88:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed87:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref90#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref90:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref85#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref85:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref86#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref86:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref103#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref103:
	movq $1, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError102#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed101#not indexOutOfBounds
indeksError102:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed101:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref104#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref104:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref99#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref99:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError98#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed97#not indexOutOfBounds
indeksError98:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed97:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref100#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref100:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref95#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref95:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref96#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref96:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rax
mainend:
	addq $472, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
