############################
Actual output:
--------------
8
7
6
5
4
7
6
5
4
3
6
5
4
3
2
5
4
3
2
1
4
3
2
1
0
ret 0

############################
Expected output:
----------------
8
7
6
5
4
7
6
5
4
3
6
5
4
3
2
5
4
3
2
1
4
3
2
1
0

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $536, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 28 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	movq %rbx, %r9
	cmp $0, %rbx
	jg allocPos9
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos9:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc10
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc10:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 29 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 38 while statement
while11:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp12
	movq $0, %r9
cmp12:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile11
#line: 38 list statement statement
#line: 31 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref15#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref15:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError14#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed13#not indexOutOfBounds
indeksError14:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed13:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref16#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref16:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $5, %rbx
	movq %rbx, %r9
	cmp $0, %rbx
	jg allocPos17
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos17:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc18
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc18:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 32 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 36 while statement
while19:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp20
	movq $0, %r9
cmp20:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile19
#line: 36 list statement statement
#line: 34 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	addq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref27#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref27:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError26#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed25#not indexOutOfBounds
indeksError26:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed25:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref28#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref28:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError22#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed21#not indexOutOfBounds
indeksError22:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed21:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref24#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref24:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 35 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while19
endwhile19:
#line: 37 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while11
endwhile11:
#line: 40 assign statement
	movq %rbp, %rbx
	movq %rbx, %r9
	push %rcx
	push %rdx
	push %rsi
	push %rdi
	push %r8
	push %r9
	push %r10
	push %r11
	subq $8, %rsp
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq %rsp, %r8
	addq $0, %r8
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %r9, %rbx
	push %rbx
	call retAnonArray7
	addq $16, %rsp#remove static link and parameters
	pop %r11
	pop %r10
	pop %r9
	pop %r8
	pop %rdi
	pop %rsi
	pop %rdx
	pop %rcx
	movq %rax, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 42 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 50 while statement
while29:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp30
	movq $0, %r9
cmp30:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile29
#line: 50 list statement statement
#line: 44 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 48 while statement
while31:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp32
	movq $0, %r9
cmp32:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile31
#line: 48 list statement statement
#line: 46 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError38#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed37#not indexOutOfBounds
indeksError38:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed37:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError34#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed33#not indexOutOfBounds
indeksError34:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed33:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref36#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref36:
	push %rdi
	movq %r8, %rcx
	movq (%rcx), %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 47 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-9, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-9, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while31
endwhile31:
#line: 49 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while29
endwhile29:
	movq $0, %rax
mainend:
	addq $536, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



retAnonArray7:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $344, %rsp
#line: 9 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 10 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	movq %rbx, %r9
	cmp $0, %rbx
	jg allocPos42
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos42:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc43
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc43:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 19 while statement
while44:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp45
	movq $0, %r9
cmp45:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile44
#line: 19 list statement statement
#line: 12 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref48#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref48:
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError47#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed46#not indexOutOfBounds
indeksError47:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed46:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref49#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref49:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $5, %rbx
	movq %rbx, %r9
	cmp $0, %rbx
	jg allocPos50
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos50:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc51
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc51:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 13 assign statement
	movq $0, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
#line: 17 while statement
while52:
	movq $1, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp %rbx, %r8
	jl cmp53
	movq $0, %r9
cmp53:
	movq %r9, %rbx
	cmp $1, %rbx
	jne endwhile52
#line: 17 list statement statement
#line: 15 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $3, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	movq $4, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	subq %rbx, %r9
	movq %r9, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError59#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed58#not indexOutOfBounds
indeksError59:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed58:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref61#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref61:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	movq $4, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	subq %rbx, %r9
	movq %r9, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError55#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed54#not indexOutOfBounds
indeksError55:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed54:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref57#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref57:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref68#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref68:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError67#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed66#not indexOutOfBounds
indeksError67:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed66:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref69#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref69:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	movq %rbp, %rbx
	movq %rbx, %r10
	movq %r10, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError63#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed62#not indexOutOfBounds
indeksError63:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed62:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref65#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref65:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 16 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-8, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-8, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while52
endwhile52:
#line: 18 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $1, %rbx
	inc %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq %r8, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	jmp while44
endwhile44:
#line: 20 return statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rax
	movq %rbp, %rdi		#resetting basepointer
	jmp retAnonArray7end
retAnonArray7end:
	addq $344, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
