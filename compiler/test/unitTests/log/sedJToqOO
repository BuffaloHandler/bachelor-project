
############################
Expected output:
----------------
12
12
12

############################
Other stuff:
------------
  |--> STARTING PARSING
  |--> STARTING 1ST WEEDER
  |--> STARTING TYPECHECK
   |--> Symbol collection
   |--> Expression type collection
   |--> Typechecking
  |--> STARTING INTERNAL REPRESENTATION
  |--> STARTING LIVNESS ANALYSIS
  |--> STARTING PEEPHOLE OPTIMIZATION
  |--> STARTING FINAL OUTPUT GENERATION
format:
.string	"%d\n"
.data
.align 8
heap1:
.space 1048576
freeHeap2:
.space 8
endHeap3:
.space 8
mainSPoint4:
.space 8
mainBPoint5:
.space 8
.text
.globl main
main:
	push %rbp
	movq %rsp, %rbp
	push %rbx
	push %r12
	push %r13
	push %r14
	push %r15
	subq $544, %rsp
	movq %rsp, mainSPoint4
	movq %rbp, mainBPoint5
	movq $heap1, freeHeap2
	movq $heap1, endHeap3
	addq $1048576, endHeap3
#line: 6 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-6, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $5, %rbx
	cmp $0, %rbx
	jg allocPos8
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos8:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc9
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc9:
	movq $5, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 7 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref12#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref12:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError11#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed10#not indexOutOfBounds
indeksError11:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed10:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref13#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref13:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $2, %rbx
	cmp $0, %rbx
	jg allocPos14
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos14:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc15
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc15:
	movq $2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 8 allocate statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref22#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref22:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError21#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed20#not indexOutOfBounds
indeksError21:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed20:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref23#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref23:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref18#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref18:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError17#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed16#not indexOutOfBounds
indeksError17:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed16:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref19#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref19:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	addq $16, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc24
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc24:
#line: 9 assign statement
	movq $1, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref33#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref33:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError32#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed31#not indexOutOfBounds
indeksError32:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed31:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref34#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref34:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref29#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref29:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError28#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed27#not indexOutOfBounds
indeksError28:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed27:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref30#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref30:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref25#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref25:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref26#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref26:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 10 assign statement
	movq $2, %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref43#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref43:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError42#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed41#not indexOutOfBounds
indeksError42:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed41:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref44#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref44:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref39#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref39:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError38#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed37#not indexOutOfBounds
indeksError38:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed37:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref40#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref40:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref35#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref35:
	addq $8, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref36#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref36:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 11 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref53#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref53:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError52#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed51#not indexOutOfBounds
indeksError52:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed51:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref54#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref54:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref49#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref49:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError48#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed47#not indexOutOfBounds
indeksError48:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed47:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref50#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref50:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref45#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref45:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref46#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref46:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref63#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref63:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError62#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed61#not indexOutOfBounds
indeksError62:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed61:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref64#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref64:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref59#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref59:
	movq $0, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError58#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed57#not indexOutOfBounds
indeksError58:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed57:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref60#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref60:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref55#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref55:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref56#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref56:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 14 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq freeHeap2, %rbx
	movq $-7, %rdx
	movq %rbx, (%rdi,%rdx,8)
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	movq $7, %rbx
	cmp $0, %rbx
	jg allocPos65
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos65:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc66
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc66:
	movq $7, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 15 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref73#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref73:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError72#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed71#not indexOutOfBounds
indeksError72:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed71:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref74#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref74:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref69#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref69:
	movq $0, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError68#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed67#not indexOutOfBounds
indeksError68:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed67:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref70#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref70:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref77#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref77:
	movq $3, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError76#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed75#not indexOutOfBounds
indeksError76:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed75:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref78#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref78:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 16 allocate of length statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref81#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref81:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError80#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed79#not indexOutOfBounds
indeksError80:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed79:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref82#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref82:
	movq freeHeap2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
	movq %rbx, %r8
	movq $2, %rbx
	cmp $0, %rbx
	jg allocPos83
	movq $4, %rax#negative allocation size
	jmp errorCleanup6
allocPos83:
	addq $1, %rbx#making room for arraySize
	imulq $8, %rbx
	addq %rbx, freeHeap2
	movq freeHeap2, %rbx
	cmp endHeap3, %rbx
	jl allocSucc84
	movq $6, %rax#outofMemory
	jmp errorCleanup6
allocSucc84:
	movq $2, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 17 assign statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref87#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref87:
	movq $3, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError86#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed85#not indexOutOfBounds
indeksError86:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed85:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref88#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref88:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref95#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref95:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError94#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed93#not indexOutOfBounds
indeksError94:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed93:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref96#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref96:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref91#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref91:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError90#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed89#not indexOutOfBounds
indeksError90:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed89:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref92#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref92:
	movq %r9, %rbx
	movq %r8, %rcx
	movq %rbx, (%rcx)
#line: 18 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref101#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref101:
	movq $3, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError100#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed99#not indexOutOfBounds
indeksError100:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed99:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref102#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref102:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref97#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref97:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref98#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref98:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-7, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref107#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref107:
	movq $3, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError106#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed105#not indexOutOfBounds
indeksError106:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed105:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref108#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref108:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref103#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref103:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref104#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref104:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
#line: 19 write statement
	movq %rbp, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref117#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref117:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError116#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed115#not indexOutOfBounds
indeksError116:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed115:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref118#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref118:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref113#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref113:
	movq $1, %rbx
	movq %r8, %rcx
	cmp (%rcx), %rbx
	jge indeksError112#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed111#not indexOutOfBounds
indeksError112:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed111:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref114#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref114:
	movq %r8, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref109#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref109:
	addq $0, %rbx
	movq %rbx, %r8
	cmp $0, %r8
	jne nonNullDeref110#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref110:
	movq %r8, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r8
	movq $10, %rbx
	imulq %r8, %rbx
	movq %rbx, %r8
	movq %r8, %rbx
	movq %rbx, %r8
	movq %rbp, %rbx
	movq %rbx, %r9
	movq %r9, %rbx
	movq %rbx, %rdi
	movq $-6, %rdx
	movq (%rdi,%rdx,8), %rbx
	movq %rbp, %rdi		#resetting basepointer
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref127#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref127:
	movq $1, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError126#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed125#not indexOutOfBounds
indeksError126:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed125:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref128#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref128:
	movq %r9, %rcx
	movq (%rcx), %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref123#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref123:
	movq $1, %rbx
	movq %r9, %rcx
	cmp (%rcx), %rbx
	jge indeksError122#indexOutOfBounds
	cmp $0, %rbx
	jge indeksAllowed121#not indexOutOfBounds
indeksError122:
	movq $2, %rax#IndexOutOfBounds
	jmp errorCleanup6
indeksAllowed121:
	addq $1, %rbx#moving past array-size-value
	imulq $8, %rbx
	addq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref124#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref124:
	movq %r9, %rcx
	movq (%rcx), %rbx
	cmp $0, %rbx
	jne nonNullDeref119#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref119:
	addq $8, %rbx
	movq %rbx, %r9
	cmp $0, %r9
	jne nonNullDeref120#not NULL
	movq $5, %rax
	jmp errorCleanup6
nonNullDeref120:
	movq %r9, %rcx
	movq (%rcx), %rbx
	addq %rbx, %r8
	push %rdi
	movq %r8, %rsi
	movq $format, %rdi
	movq $0, %rax
	call printf
	pop %rdi
	movq $0, %rax
mainend:
	addq $544, %rsp
	pop %r15
	pop %r14
	pop %r13
	pop %r12
	pop %rbx
	movq %rbp, %rsp
	pop %rbp
	ret 



errorCleanup6:
	movq mainSPoint4, %rsp
	movq mainBPoint5, %rbp
	jmp mainend
